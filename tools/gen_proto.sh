#!/bin/bash
set -ex

function copy_proto_stubs() {
  local src_dir="$1"
  local dst_dir="$2"

  if [[ -z "${src_dir}" ]] || [[ -z "{dst_dir}" ]]; then
    echo "src_dir and dst_dir should not be empty."
    exit 1
  fi

  # Replace 'import pipeline_spec' seciont for solving protobuf descriptor error
  #
  # kubeflow/pipelines repository doens't have any Bazel build script.
  # So, we needed to add own bazel build file.
  #
  # However, kfp.pipeline_spec import path refers to pip installed package, kfp-pipeline-spec.
  # As a result, the protobuf descriptor generated by bazel doesn't notice kfp-pipeline-spec
  # so that it makes different descriptor which we designated on bazel build process.
  #
  # TODO(johan): Remove this hack after protobuf generates same descriptor when using bazel and setup.py both.
  # echo "Replace 'import pipeline_spec' seciont to 'from kfp.pipeline_spec import pipeline_spec_pb2'"
  # find . -name "pipeline_config_pb2.py" -exec sed -i "s/^import pipeline_spec_pb2 as pipeline__spec__pb2$/from kfp.pipeline_spec import pipeline_spec_pb2 as pipeline__spec__pb2/g" {} \;

  find . -name "*_pb2.py" -exec cp -f {} ${dst_dir}/{} \;
  find . -name "*_pb2_grpc.py" -exec cp -f {} ${dst_dir}/{} \;
}

function gen_proto_main() {
  set -o nounset
  set -o xtrace

  # `BUILD_WORKSPACE_DIRECTORY` is provided by Bazel.
  # See https://docs.bazel.build/versions/master/user-manual.html for details.
  if [[ -z "${BUILD_WORKSPACE_DIRECTORY}" ]]; then
    echo "BUILD_WORKSPACE_DIRECTORY is unexpectedly empty."
    exit 1
  fi

  copy_proto_stubs "${PWD}" "${BUILD_WORKSPACE_DIRECTORY}"
}

gen_proto_main "$@"
